以下のコードに変更を加えました。変更内容のdiffは次の通りです：

diff --git a/.gitignore b/.gitignore
index 9d71e45..9140500 100644
--- a/.gitignore
+++ b/.gitignore
@@ -43,4 +43,4 @@ data/*
 .env.test
 
 # git
-*.patch
+generated-prompt.txt
diff --git a/README.md b/README.md
index 4cba078..d753de6 100644
--- a/README.md
+++ b/README.md
@@ -13,10 +13,13 @@
    - [`vercel` 環境変数の例](#vercel-環境変数の例)
 3. [パスワードのハッシュ化](#パスワードのハッシュ化)
    - [ハッシュ化スクリプトの実行方法](#ハッシュ化スクリプトの実行方法)
-4. [`path定義` の作成方法](#path定義-の作成方法)
-5. [シークレットキーの生成](#シークレットキーの生成)
+4. [シークレットキーの生成](#シークレットキーの生成)
    - [シークレットキーの生成方法](#シークレットキーの生成方法)
-6. [利用可能なスクリプト](#利用可能なスクリプト)
+5. [path定義の作成](#path定義の作成)
+6. [Git差分からプロンプトを生成するスクリプト](#git差分からプロンプトを生成するスクリプト)
+   - [スクリプトの説明](#スクリプトの説明)
+   - [使用方法](#使用方法)
+7. [利用可能なスクリプト](#利用可能なスクリプト)
 
 ---
 
@@ -152,6 +155,8 @@ openssl などを利用して生成可能です。openssl がインストール
 openssl rand -base64 32
 ```
 
+## path定義の作成
+
 ### `path定義` の作成方法
 
 `generateRoutes.js` スクリプトは、[pathpida](https://github.com/aspida/pathpida)を参考に作成しています。これはアプリディレクトリの構造からページパスを生成するためのツールです。このスクリプトを使用して、指定したディレクトリ内のページに対応する TypeScript オブジェクトを生成できます。また、Queryパラメータをurlに設定したい場合は、設定したいパスに紐づくファイル内で、Query or OptionalQuery 型で型を定義しexportしてください。
@@ -180,7 +185,7 @@ node generateRoutes.js <baseDir> <outputPath> <methodOption(all|one|both)> <prin
 - `true`: pathnameを生成します。
 - `false`: pathnameを生成しません。
 
-#### 使用例
+#### 使用例-`path定義`
 
 例えば、`src/app` ディレクトリ内のページパスを生成し、結果を `pagesPath.ts` ファイルに出力するには、次のコマンドを使用します。
 
@@ -194,11 +199,34 @@ node generateRoutes.js ./src/app ./src/lib/path.ts one false
 
 出力ファイルには、ページ構造に対応する TypeScript オブジェクトとメソッドが含まれています。生成されたコードは、アプリ内のさまざまなページやルートにアクセスするための便利な方法を提供します。
 
-#### 注意事項
+#### 注意事項-`path定義`
 
 - ベースディレクトリに `node_modules` や、ファイル名が `_` で始まるディレクトリ・ファイルは無視されます。
 - 出力ファイルのメソッドは `page.tsx`、`page.jsx`、`route.ts`、`route.js` ファイルに基づいて生成されます。
 
+## Git差分からプロンプトを生成するスクリプト
+
+### スクリプトの説明
+
+`generatePromptFromGitDiff.js` スクリプトは、Gitの差分を取得し、その内容に基づいてChatGPT用のプロンプトを自動生成するためのツールです。このスクリプトは、ステージされていない変更、ステージされた変更、そして新規ファイルの内容を含めてプロンプトを作成します。生成されたプロンプトはコンソールに出力され、一部は `generated_prompt.txt` ファイルにも保存されます。
+
+### 使用方法
+
+1. スクリプトファイル `generatePromptFromGitDiff.js` をプロジェクトのルートディレクトリに配置します。
+2. コマンドラインから次のコマンドを実行して、プロンプトを生成します。
+
+```cmd
+node generatePromptFromGitDiff.js
+```
+
+このコマンドにより、現在のGitリポジトリ内の差分が取得され、それに基づいてプロンプトが生成されます。生成されたプロンプトの一部はコンソールに表示され、全文は `generated_prompt.txt` に出力されます。
+
+### 注意事項
+
+- Gitがインストールされている環境で実行してください。
+- 差分を正しく取得するため、リポジトリ内で実行してください。
+- 新規ファイルの内容もプロンプトに含めるため、未追跡ファイルがある場合はそれらの内容も読み取られます。
+
 ## 利用可能なスクリプト
 
 このプロジェクトでは、開発、テスト、データベース操作を管理するためにいくつかの npm スクリプトが用意されています。以下は、それぞれのコマンドとその説明です。
diff --git a/eslint.config.mjs b/eslint.config.mjs
index fb13d6d..76f4c2c 100644
--- a/eslint.config.mjs
+++ b/eslint.config.mjs
@@ -28,6 +28,7 @@ const config = [
       // コマンド用ファイル
       "**/generateRoutes.js",
       "**/hashPassword.js",
+      "**/generatePromptFromGitDiff.js",
     ],
   },
   {


--- 新規ファイルの内容 ---

ファイル: .gitattributes
# テキストファイル (改行コードは LF)
*.css         text eol=lf
*.env         text eol=lf
*.gitattributes text eol=lf
*.gitignore   text eol=lf
*.js          text eol=lf
*.json        text eol=lf
*.md          text eol=lf
*.mjs         text eol=lf
*.prisma      text eol=lf
*.sql         text eol=lf
*.test        text eol=lf
*.toml        text eol=lf
*.ts          text eol=lf
*.tsx         text eol=lf
*.txt         text eol=lf
.code-workspace text eol=lf
.gitignore    text eol=lf


# バイナリファイル (Gitの改行変換を無効化)
*.ico         binary
*.png         binary
*.svg         binary
*.webp        binary

# 開発環境固有の設定ファイルは設定しない
# .local


ファイル: generatePromptFromGitDiff.js
const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");

// 最大表示行数
const MAX_CONSOLE_LINES = 10;

// 差分を取得してプロンプトを生成する関数
function generatePromptFromGitDiff() {
  // ステージされていない変更とステージされた変更を取得
  exec("git diff && git diff --cached", (error, stdout, stderr) => {
    if (error) {
      console.error(`git diff 実行エラー: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`stderr: ${stderr}`);
      return;
    }

    let patchContent = stdout;

    // 未追跡ファイルのリストを取得
    exec(
      "git ls-files --others --exclude-standard",
      (err, filesStdout, filesStderr) => {
        if (err) {
          console.error(`未追跡ファイル取得エラー: ${err.message}`);
          return;
        }
        if (filesStderr) {
          console.error(`stderr: ${filesStderr}`);
          return;
        }

        const files = filesStdout
          .split("\n")
          .filter((file) => file.trim() !== "");
        if (files.length > 0) {
          patchContent += "\n\n--- 新規ファイルの内容 ---\n";
          files.forEach((file) => {
            try {
              const fileContent = fs.readFileSync(file, "utf8");
              patchContent += `\nファイル: ${file}\n${fileContent}\n`;
            } catch (readError) {
              console.error(
                `ファイル読み込みエラー: ${file} - ${readError.message}`,
              );
            }
          });
        }

        // ChatGPT用プロンプトを生成
        const prompt = generatePrompt(patchContent);

        // コンソールへの出力（最初の10行のみ）
        console.log("\n--- ChatGPT用プロンプト (一部表示) ---\n");
        const promptLines = prompt.split("\n");
        promptLines
          .slice(0, MAX_CONSOLE_LINES)
          .forEach((line) => console.log(line));
        if (promptLines.length > MAX_CONSOLE_LINES) {
          console.log("... (省略) ...");
        }

        // ファイルへの出力
        const outputPath = path.join(__dirname, "generated_prompt.txt");
        fs.writeFileSync(outputPath, prompt, "utf8");
        console.log(`\nプロンプトがファイルに出力されました: ${outputPath}`);
      },
    );
  });
}

// ChatGPT用のプロンプトを生成する関数（日本語対応）
function generatePrompt(patchContent) {
  return `
以下のコードに変更を加えました。変更内容のdiffは次の通りです：

${patchContent}

上記の変更に基づいて、簡潔で分かりやすい日本語のコミットメッセージを作成してください。
変更の目的が明確に伝わるメッセージにしてください。
  `.trim();
}

// 実行
generatePromptFromGitDiff();


ファイル: generated_prompt.txt
以下のコードに変更を加えました。変更内容のdiffは次の通りです：

diff --git a/.gitignore b/.gitignore
index 9d71e45..9140500 100644
--- a/.gitignore
+++ b/.gitignore
@@ -43,4 +43,4 @@ data/*
 .env.test
 
 # git
-*.patch
+generated-prompt.txt
diff --git a/README.md b/README.md
index 4cba078..d753de6 100644
--- a/README.md
+++ b/README.md
@@ -13,10 +13,13 @@
    - [`vercel` 環境変数の例](#vercel-環境変数の例)
 3. [パスワードのハッシュ化](#パスワードのハッシュ化)
    - [ハッシュ化スクリプトの実行方法](#ハッシュ化スクリプトの実行方法)
-4. [`path定義` の作成方法](#path定義-の作成方法)
-5. [シークレットキーの生成](#シークレットキーの生成)
+4. [シークレットキーの生成](#シークレットキーの生成)
    - [シークレットキーの生成方法](#シークレットキーの生成方法)
-6. [利用可能なスクリプト](#利用可能なスクリプト)
+5. [path定義の作成](#path定義の作成)
+6. [Git差分からプロンプトを生成するスクリプト](#git差分からプロンプトを生成するスクリプト)
+   - [スクリプトの説明](#スクリプトの説明)
+   - [使用方法](#使用方法)
+7. [利用可能なスクリプト](#利用可能なスクリプト)
 
 ---
 
@@ -152,6 +155,8 @@ openssl などを利用して生成可能です。openssl がインストール
 openssl rand -base64 32
 ```
 
+## path定義の作成
+
 ### `path定義` の作成方法
 
 `generateRoutes.js` スクリプトは、[pathpida](https://github.com/aspida/pathpida)を参考に作成しています。これはアプリディレクトリの構造からページパスを生成するためのツールです。このスクリプトを使用して、指定したディレクトリ内のページに対応する TypeScript オブジェクトを生成できます。また、Queryパラメータをurlに設定したい場合は、設定したいパスに紐づくファイル内で、Query or OptionalQuery 型で型を定義しexportしてください。
@@ -180,7 +185,7 @@ node generateRoutes.js <baseDir> <outputPath> <methodOption(all|one|both)> <prin
 - `true`: pathnameを生成します。
 - `false`: pathnameを生成しません。
 
-#### 使用例
+#### 使用例-`path定義`
 
 例えば、`src/app` ディレクトリ内のページパスを生成し、結果を `pagesPath.ts` ファイルに出力するには、次のコマンドを使用します。
 
@@ -194,11 +199,34 @@ node generateRoutes.js ./src/app ./src/lib/path.ts one false
 
 出力ファイルには、ページ構造に対応する TypeScript オブジェクトとメソッドが含まれています。生成されたコードは、アプリ内のさまざまなページやルートにアクセスするための便利な方法を提供します。
 
-#### 注意事項
+#### 注意事項-`path定義`
 
 - ベースディレクトリに `node_modules` や、ファイル名が `_` で始まるディレクトリ・ファイルは無視されます。
 - 出力ファイルのメソッドは `page.tsx`、`page.jsx`、`route.ts`、`route.js` ファイルに基づいて生成されます。
 
+## Git差分からプロンプトを生成するスクリプト
+
+### スクリプトの説明
+
+`generatePromptFromGitDiff.js` スクリプトは、Gitの差分を取得し、その内容に基づいてChatGPT用のプロンプトを自動生成するためのツールです。このスクリプトは、ステージされていない変更、ステージされた変更、そして新規ファイルの内容を含めてプロンプトを作成します。生成されたプロンプトはコンソールに出力され、一部は `generated_prompt.txt` ファイルにも保存されます。
+
+### 使用方法
+
+1. スクリプトファイル `generatePromptFromGitDiff.js` をプロジェクトのルートディレクトリに配置します。
+2. コマンドラインから次のコマンドを実行して、プロンプトを生成します。
+
+```cmd
+node generatePromptFromGitDiff.js
+```
+
+このコマンドにより、現在のGitリポジトリ内の差分が取得され、それに基づいてプロンプトが生成されます。生成されたプロンプトの一部はコンソールに表示され、全文は `generated_prompt.txt` に出力されます。
+
+### 注意事項
+
+- Gitがインストールされている環境で実行してください。
+- 差分を正しく取得するため、リポジトリ内で実行してください。
+- 新規ファイルの内容もプロンプトに含めるため、未追跡ファイルがある場合はそれらの内容も読み取られます。
+
 ## 利用可能なスクリプト
 
 このプロジェクトでは、開発、テスト、データベース操作を管理するためにいくつかの npm スクリプトが用意されています。以下は、それぞれのコマンドとその説明です。
diff --git a/eslint.config.mjs b/eslint.config.mjs
index fb13d6d..76f4c2c 100644
--- a/eslint.config.mjs
+++ b/eslint.config.mjs
@@ -28,6 +28,7 @@ const config = [
       // コマンド用ファイル
       "**/generateRoutes.js",
       "**/hashPassword.js",
+      "**/generatePromptFromGitDiff.js",
     ],
   },
   {


--- 新規ファイルの内容 ---

ファイル: .gitattributes
# テキストファイル (改行コードは LF)
*.css         text eol=lf
*.env         text eol=lf
*.gitattributes text eol=lf
*.gitignore   text eol=lf
*.js          text eol=lf
*.json        text eol=lf
*.md          text eol=lf
*.mjs         text eol=lf
*.prisma      text eol=lf
*.sql         text eol=lf
*.test        text eol=lf
*.toml        text eol=lf
*.ts          text eol=lf
*.tsx         text eol=lf
*.txt         text eol=lf
.code-workspace text eol=lf
.gitignore    text eol=lf


# バイナリファイル (Gitの改行変換を無効化)
*.ico         binary
*.png         binary
*.svg         binary
*.webp        binary

# 開発環境固有の設定ファイルは設定しない
# .local


ファイル: generatePromptFromGitDiff.js
const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");

// 最大表示行数
const MAX_CONSOLE_LINES = 10;

// 差分を取得してプロンプトを生成する関数
function generatePromptFromGitDiff() {
  // ステージされていない変更とステージされた変更を取得
  exec("git diff && git diff --cached", (error, stdout, stderr) => {
    if (error) {
      console.error(`git diff 実行エラー: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`stderr: ${stderr}`);
      return;
    }

    let patchContent = stdout;

    // 未追跡ファイルのリストを取得
    exec(
      "git ls-files --others --exclude-standard",
      (err, filesStdout, filesStderr) => {
        if (err) {
          console.error(`未追跡ファイル取得エラー: ${err.message}`);
          return;
        }
        if (filesStderr) {
          console.error(`stderr: ${filesStderr}`);
          return;
        }

        const files = filesStdout
          .split("\n")
          .filter((file) => file.trim() !== "");
        if (files.length > 0) {
          patchContent += "\n\n--- 新規ファイルの内容 ---\n";
          files.forEach((file) => {
            try {
              const fileContent = fs.readFileSync(file, "utf8");
              patchContent += `\nファイル: ${file}\n${fileContent}\n`;
            } catch (readError) {
              console.error(
                `ファイル読み込みエラー: ${file} - ${readError.message}`,
              );
            }
          });
        }

        // ChatGPT用プロンプトを生成
        const prompt = generatePrompt(patchContent);

        // コンソールへの出力（最初の10行のみ）
        console.log("\n--- ChatGPT用プロンプト (一部表示) ---\n");
        const promptLines = prompt.split("\n");
        promptLines
          .slice(0, MAX_CONSOLE_LINES)
          .forEach((line) => console.log(line));
        if (promptLines.length > MAX_CONSOLE_LINES) {
          console.log("... (省略) ...");
        }

        // ファイルへの出力
        const outputPath = path.join(__dirname, "generated_prompt.txt");
        fs.writeFileSync(outputPath, prompt, "utf8");
        console.log(`\nプロンプトがファイルに出力されました: ${outputPath}`);
      },
    );
  });
}

// ChatGPT用のプロンプトを生成する関数（日本語対応）
function generatePrompt(patchContent) {
  return `
以下のコードに変更を加えました。変更内容のdiffは次の通りです：

${patchContent}

上記の変更に基づいて、簡潔で分かりやすい日本語のコミットメッセージを作成してください。
変更の目的が明確に伝わるメッセージにしてください。
  `.trim();
}

// 実行
generatePromptFromGitDiff();


ファイル: generated_prompt.txt
以下のコードに変更を加えました。変更内容のdiffは次の通りです：

diff --git a/.gitignore b/.gitignore
index 9d71e45..9140500 100644
--- a/.gitignore
+++ b/.gitignore
@@ -43,4 +43,4 @@ data/*
 .env.test
 
 # git
-*.patch
+generated-prompt.txt
diff --git a/eslint.config.mjs b/eslint.config.mjs
index fb13d6d..76f4c2c 100644
--- a/eslint.config.mjs
+++ b/eslint.config.mjs
@@ -28,6 +28,7 @@ const config = [
       // コマンド用ファイル
       "**/generateRoutes.js",
       "**/hashPassword.js",
+      "**/generatePromptFromGitDiff.js",
     ],
   },
   {


--- 新規ファイルの内容 ---

ファイル: .gitattributes
* text=auto


ファイル: generatePromptFromGitDiff.js
const { exec } = require("child_process");
const fs = require("fs");
const path = require("path");

// 最大表示行数
const MAX_CONSOLE_LINES = 10;

// 差分を取得してプロンプトを生成する関数
function generatePromptFromGitDiff() {
  // ステージされていない変更とステージされた変更を取得
  exec("git diff && git diff --cached", (error, stdout, stderr) => {
    if (error) {
      console.error(`git diff 実行エラー: ${error.message}`);
      return;
    }
    if (stderr) {
      console.error(`stderr: ${stderr}`);
      return;
    }

    let patchContent = stdout;

    // 未追跡ファイルのリストを取得
    exec(
      "git ls-files --others --exclude-standard",
      (err, filesStdout, filesStderr) => {
        if (err) {
          console.error(`未追跡ファイル取得エラー: ${err.message}`);
          return;
        }
        if (filesStderr) {
          console.error(`stderr: ${filesStderr}`);
          return;
        }

        const files = filesStdout
          .split("\n")
          .filter((file) => file.trim() !== "");
        if (files.length > 0) {
          patchContent += "\n\n--- 新規ファイルの内容 ---\n";
          files.forEach((file) => {
            try {
              const fileContent = fs.readFileSync(file, "utf8");
              patchContent += `\nファイル: ${file}\n${fileContent}\n`;
            } catch (readError) {
              console.error(
                `ファイル読み込みエラー: ${file} - ${readError.message}`,
              );
            }
          });
        }

        // ChatGPT用プロンプトを生成
        const prompt = generatePrompt(patchContent);

        // コンソールへの出力（最初の10行のみ）
        console.log("\n--- ChatGPT用プロンプト (一部表示) ---\n");
        const promptLines = prompt.split("\n");
        promptLines
          .slice(0, MAX_CONSOLE_LINES)
          .forEach((line) => console.log(line));
        if (promptLines.length > MAX_CONSOLE_LINES) {
          console.log("... (省略) ...");
        }

        // ファイルへの出力
        const outputPath = path.join(__dirname, "generated_prompt.txt");
        fs.writeFileSync(outputPath, prompt, "utf8");
        console.log(`\nプロンプトがファイルに出力されました: ${outputPath}`);
      },
    );
  });
}

// ChatGPT用のプロンプトを生成する関数（日本語対応）
function generatePrompt(patchContent) {
  return `
以下のコードに変更を加えました。変更内容のdiffは次の通りです：

${patchContent}

上記の変更に基づいて、簡潔で分かりやすい日本語のコミットメッセージを作成してください。
変更の目的が明確に伝わるメッセージにしてください。
  `.trim();
}

// 実行
generatePromptFromGitDiff();



上記の変更に基づいて、簡潔で分かりやすい日本語のコミットメッセージを作成してください。
変更の目的が明確に伝わるメッセージにしてください。


上記の変更に基づいて、簡潔で分かりやすい日本語のコミットメッセージを作成してください。
変更の目的が明確に伝わるメッセージにしてください。


上記の変更に基づいて、簡潔で分かりやすい日本語のコミットメッセージを作成してください。
変更の目的が明確に伝わるメッセージにしてください。